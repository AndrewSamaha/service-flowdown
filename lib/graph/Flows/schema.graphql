type User {
    id: ID!
    username: String
    permissions: [String]
}

type Song {
    id: ID!
    name: String
    artist: String
    duration: Duration
    order: Int
}

type Asana {
    id: ID!
    name: String
    cue: String
    duration: Duration
    order: Int
}

type Section {
    id: ID!
    name: String
    duration: Duration
    order: Int
}


type Flow {
    id: ID!
    name: String
    sections: [Section]
    songs: [Song]
    asanas: [Asana]
}

type Duration {
    float: Float
    string: String
}

input FlowInput {
    id: ID
    name: String
    sections: [SectionInput]
    songs: [SongInput]
    asanas: [AsanaInput]
}

input SectionInput {
    id: ID
    name: String
    durationString: String
    order: Int
}

input AsanaInput {
    id: ID
    name: String
    cue: String
    durationString: String
    order: Int
}

input SongInput {
    id: ID
    name: String
    artist: String
    durationString: String
    order: Int
}

type Query {
    getAllFlows: [Flow]
    getFlow(flowId: Int): Flow
}

type Mutation {
    createNewFlow: Flow
    updateFlow(flow: FlowInput): Flow
}

